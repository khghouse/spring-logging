version: '3.8'

services:
  app:
    build:
      context: . # Dockerfile이 위치한 디렉토리
      dockerfile: Dockerfile # 사용할 Dockerfile 이름 (기본값이므로 생략 가능)
    container_name: spring-app
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    volumes:
      - ./logs:/app/logs # 로그 파일 저장
    networks:
      - app-network
    restart: unless-stopped

  # Loki - 로그 저장소
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - app-network
    restart: unless-stopped

  # Promtail - 로그 수집기
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - ./logs:/var/log/app:ro  # Spring Boot 로그 디렉토리와 동일한 호스트 경로 사용
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network
    depends_on:
      - loki
      - app
    restart: unless-stopped

  # Grafana - 시각화
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - app-network
    depends_on:
      - loki
    restart: unless-stopped

volumes:
  loki-data:
  grafana-data:

networks:
  app-network:
    driver: bridge
